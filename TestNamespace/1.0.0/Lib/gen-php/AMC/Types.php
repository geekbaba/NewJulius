<?php

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class CType {
  const TABLE = 1;
  const CACHE = 2;
  const LOGIC = 3;
  const OTHER = 4;
  static public $__names = array(
    1 => 'TABLE',
    2 => 'CACHE',
    3 => 'LOGIC',
    4 => 'OTHER',
  );
}

final class paramType {
  const STRING = 1;
  const TLIST = 2;
  const MAP = 3;
  const MAPLIST = 4;
  const MAPMAP = 5;
  static public $__names = array(
    1 => 'STRING',
    2 => 'TLIST',
    3 => 'MAP',
    4 => 'MAPLIST',
    5 => 'MAPMAP',
  );
}

class AMCException extends TException {
  static $_TSPEC;

  public $message = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'AMCException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AMCException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I64, 2);
      $xfer += $output->writeI64($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ParamItem {
  static $_TSPEC;

  public $name = null;
  public $paramtype = null;
  public $valString = null;
  public $valList = null;
  public $valMap = null;
  public $valMaplist = null;
  public $valMapMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'paramtype',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'valString',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'valList',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'valMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'valMaplist',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        7 => array(
          'var' => 'valMapMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['paramtype'])) {
        $this->paramtype = $vals['paramtype'];
      }
      if (isset($vals['valString'])) {
        $this->valString = $vals['valString'];
      }
      if (isset($vals['valList'])) {
        $this->valList = $vals['valList'];
      }
      if (isset($vals['valMap'])) {
        $this->valMap = $vals['valMap'];
      }
      if (isset($vals['valMaplist'])) {
        $this->valMaplist = $vals['valMaplist'];
      }
      if (isset($vals['valMapMap'])) {
        $this->valMapMap = $vals['valMapMap'];
      }
    }
  }

  public function getName() {
    return 'ParamItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->paramtype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->valString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->valList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->valList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->valMap = array();
            $_size6 = 0;
            $_ktype7 = 0;
            $_vtype8 = 0;
            $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $key11 = '';
              $val12 = '';
              $xfer += $input->readString($key11);
              $xfer += $input->readString($val12);
              $this->valMap[$key11] = $val12;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->valMaplist = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = array();
              $_size19 = 0;
              $_ktype20 = 0;
              $_vtype21 = 0;
              $xfer += $input->readMapBegin($_ktype20, $_vtype21, $_size19);
              for ($_i23 = 0; $_i23 < $_size19; ++$_i23)
              {
                $key24 = '';
                $val25 = '';
                $xfer += $input->readString($key24);
                $xfer += $input->readString($val25);
                $elem18[$key24] = $val25;
              }
              $xfer += $input->readMapEnd();
              $this->valMaplist []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->valMapMap = array();
            $_size26 = 0;
            $_ktype27 = 0;
            $_vtype28 = 0;
            $xfer += $input->readMapBegin($_ktype27, $_vtype28, $_size26);
            for ($_i30 = 0; $_i30 < $_size26; ++$_i30)
            {
              $key31 = '';
              $val32 = array();
              $xfer += $input->readString($key31);
              $val32 = array();
              $_size33 = 0;
              $_ktype34 = 0;
              $_vtype35 = 0;
              $xfer += $input->readMapBegin($_ktype34, $_vtype35, $_size33);
              for ($_i37 = 0; $_i37 < $_size33; ++$_i37)
              {
                $key38 = '';
                $val39 = '';
                $xfer += $input->readString($key38);
                $xfer += $input->readString($val39);
                $val32[$key38] = $val39;
              }
              $xfer += $input->readMapEnd();
              $this->valMapMap[$key31] = $val32;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ParamItem');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paramtype !== null) {
      $xfer += $output->writeFieldBegin('paramtype', TType::I32, 2);
      $xfer += $output->writeI32($this->paramtype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->valString !== null) {
      $xfer += $output->writeFieldBegin('valString', TType::STRING, 3);
      $xfer += $output->writeString($this->valString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->valList !== null) {
      if (!is_array($this->valList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('valList', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->valList));
        {
          foreach ($this->valList as $iter40)
          {
            $xfer += $output->writeString($iter40);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->valMap !== null) {
      if (!is_array($this->valMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('valMap', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->valMap));
        {
          foreach ($this->valMap as $kiter41 => $viter42)
          {
            $xfer += $output->writeString($kiter41);
            $xfer += $output->writeString($viter42);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->valMaplist !== null) {
      if (!is_array($this->valMaplist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('valMaplist', TType::LST, 6);
      {
        $output->writeListBegin(TType::MAP, count($this->valMaplist));
        {
          foreach ($this->valMaplist as $iter43)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter43));
              {
                foreach ($iter43 as $kiter44 => $viter45)
                {
                  $xfer += $output->writeString($kiter44);
                  $xfer += $output->writeString($viter45);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->valMapMap !== null) {
      if (!is_array($this->valMapMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('valMapMap', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->valMapMap));
        {
          foreach ($this->valMapMap as $kiter46 => $viter47)
          {
            $xfer += $output->writeString($kiter46);
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($viter47));
              {
                foreach ($viter47 as $kiter48 => $viter49)
                {
                  $xfer += $output->writeString($kiter48);
                  $xfer += $output->writeString($viter49);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DataList {
  static $_TSPEC;

  public $info = null;
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'info',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ParamItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'DataList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->info = array();
            $_size50 = 0;
            $_ktype51 = 0;
            $_vtype52 = 0;
            $xfer += $input->readMapBegin($_ktype51, $_vtype52, $_size50);
            for ($_i54 = 0; $_i54 < $_size50; ++$_i54)
            {
              $key55 = '';
              $val56 = '';
              $xfer += $input->readString($key55);
              $xfer += $input->readString($val56);
              $this->info[$key55] = $val56;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->value = array();
            $_size57 = 0;
            $_etype60 = 0;
            $xfer += $input->readListBegin($_etype60, $_size57);
            for ($_i61 = 0; $_i61 < $_size57; ++$_i61)
            {
              $elem62 = null;
              $elem62 = new \ParamItem();
              $xfer += $elem62->read($input);
              $this->value []= $elem62;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DataList');
    if ($this->info !== null) {
      if (!is_array($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->info));
        {
          foreach ($this->info as $kiter63 => $viter64)
          {
            $xfer += $output->writeString($kiter63);
            $xfer += $output->writeString($viter64);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_array($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->value));
        {
          foreach ($this->value as $iter65)
          {
            $xfer += $iter65->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Item {
  static $_TSPEC;

  public $name = null;
  public $description = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
    }
  }

  public function getName() {
    return 'Item';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Item');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MultiData {
  static $_TSPEC;

  public $nameSpace = null;
  public $custom = null;
  public $field = null;
  public $condition = null;
  public $value = null;
  public $values = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nameSpace',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'custom',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'field',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'condition',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        5 => array(
          'var' => 'value',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nameSpace'])) {
        $this->nameSpace = $vals['nameSpace'];
      }
      if (isset($vals['custom'])) {
        $this->custom = $vals['custom'];
      }
      if (isset($vals['field'])) {
        $this->field = $vals['field'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
    }
  }

  public function getName() {
    return 'MultiData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nameSpace);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->custom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->field = array();
            $_size66 = 0;
            $_etype69 = 0;
            $xfer += $input->readListBegin($_etype69, $_size66);
            for ($_i70 = 0; $_i70 < $_size66; ++$_i70)
            {
              $elem71 = null;
              $xfer += $input->readString($elem71);
              $this->field []= $elem71;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->condition = array();
            $_size72 = 0;
            $_ktype73 = 0;
            $_vtype74 = 0;
            $xfer += $input->readMapBegin($_ktype73, $_vtype74, $_size72);
            for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
            {
              $key77 = '';
              $val78 = array();
              $xfer += $input->readString($key77);
              $val78 = array();
              $_size79 = 0;
              $_ktype80 = 0;
              $_vtype81 = 0;
              $xfer += $input->readMapBegin($_ktype80, $_vtype81, $_size79);
              for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
              {
                $key84 = '';
                $val85 = '';
                $xfer += $input->readString($key84);
                $xfer += $input->readString($val85);
                $val78[$key84] = $val85;
              }
              $xfer += $input->readMapEnd();
              $this->condition[$key77] = $val78;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->value = array();
            $_size86 = 0;
            $_ktype87 = 0;
            $_vtype88 = 0;
            $xfer += $input->readMapBegin($_ktype87, $_vtype88, $_size86);
            for ($_i90 = 0; $_i90 < $_size86; ++$_i90)
            {
              $key91 = '';
              $val92 = '';
              $xfer += $input->readString($key91);
              $xfer += $input->readString($val92);
              $this->value[$key91] = $val92;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size93 = 0;
            $_etype96 = 0;
            $xfer += $input->readListBegin($_etype96, $_size93);
            for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
            {
              $elem98 = null;
              $elem98 = array();
              $_size99 = 0;
              $_ktype100 = 0;
              $_vtype101 = 0;
              $xfer += $input->readMapBegin($_ktype100, $_vtype101, $_size99);
              for ($_i103 = 0; $_i103 < $_size99; ++$_i103)
              {
                $key104 = '';
                $val105 = '';
                $xfer += $input->readString($key104);
                $xfer += $input->readString($val105);
                $elem98[$key104] = $val105;
              }
              $xfer += $input->readMapEnd();
              $this->values []= $elem98;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MultiData');
    if ($this->nameSpace !== null) {
      $xfer += $output->writeFieldBegin('nameSpace', TType::STRING, 1);
      $xfer += $output->writeString($this->nameSpace);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->custom !== null) {
      $xfer += $output->writeFieldBegin('custom', TType::I32, 2);
      $xfer += $output->writeI32($this->custom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->field !== null) {
      if (!is_array($this->field)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('field', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->field));
        {
          foreach ($this->field as $iter106)
          {
            $xfer += $output->writeString($iter106);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_array($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->condition));
        {
          foreach ($this->condition as $kiter107 => $viter108)
          {
            $xfer += $output->writeString($kiter107);
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($viter108));
              {
                foreach ($viter108 as $kiter109 => $viter110)
                {
                  $xfer += $output->writeString($kiter109);
                  $xfer += $output->writeString($viter110);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_array($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->value));
        {
          foreach ($this->value as $kiter111 => $viter112)
          {
            $xfer += $output->writeString($kiter111);
            $xfer += $output->writeString($viter112);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 6);
      {
        $output->writeListBegin(TType::MAP, count($this->values));
        {
          foreach ($this->values as $iter113)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter113));
              {
                foreach ($iter113 as $kiter114 => $viter115)
                {
                  $xfer += $output->writeString($kiter114);
                  $xfer += $output->writeString($viter115);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


